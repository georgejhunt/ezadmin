#!/bin/sh -x
# tinycore script to partition, and load the OS for XSCE

# first look for command line flags 
efi=`grep -w efi /proc/cmdline`
mbr=`grep -w mbr /proc/cmdline`
i386=`grep -w i386 /proc/cmdline`
x86_64=`grep -w x86_64 /proc/cmdline`
#installdir=$(cd `dirname ${0}`; pwd)
curdir=`pwd`

# wipe out the partition table
#if [ -d /mnt/sdb1/tce ];then
#	dd ip=/dev/zero of=/dev/sda bs=512 count=1
#fi
cat << EOF | fdisk /dev/sda
d
1
d
2
d
3
d
4
n
p
1

+500M
n
p
2

+5G
n
p
3


a
1
t
1
b
w
EOF
partprobe /dev/sda
until [ -e /dev/sda1 ]; do sleep .25; done
mkdosfs -F 32 -n boot /dev/sda1
mkfs.ext4 -L rootfs /dev/sda2
mkfs.ext4 -L library /dev/sda3

mount /dev/sda1 /mnt/sda1
mount /dev/sda2 /mnt/sda2
mount /dev/sda3 /mnt/sda3

# create the mbr directory framework
  mkdir -p /mnt/sda1/extlinux
  extlinux --install /mnt/sda1/extlinux
  # installing mbr does not affect uefi boot, because uefi uses firmware

# do the things based on machine width
if [ ! -z "$i386" ];then
  cp /mnt/sdb1/target/i386/vmlinuz /mnt/sda1/
  cp /mnt/sdb1/target/i386/initrd.img /mnt/sda1/
  cd /mnt/sda2/
  tar xf /mnt/sdb1/target/i386/rootfs.tgz
  cd $curdir
fi

if [ ! -z "$x86_64" ];then
  cp /mnt/sdb1/target/x86_64/vmlinuz /mnt/sda1/
  cp /mnt/sdb1/target/x86_64/initrd.img /mnt/sda1/
  cd /mnt/sda2/
  tar xf /mnt/sdb1/target/x86_64/rootfs.tgz
  cd $curdir 
fi

cp /mnt/sdb1/target/extlinux.conf /mnt/sda1/extlinux/extlinux.conf
cp /usr/local/share/syslinux/*.c32 /mnt/sda1/extlinux/

#create mount poins for the partitions
mkdir -p /mnt/sda2/boot
mkdir -p /mnt/sda2/library

# create a fstab
cat << EOF > /mnt/sda2/etc/fstab
/dev/sda2	/	ext4	defaults	0	1
/dev/sda1	/boot	ext4	defaults	0	0
/dev/sda3	/library	ext4	defaults	0	2
EOF

# clear the root password
cp /mnt/sdb1/target/passwd /mnt/sda2/etc/passwd



